function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */

/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */
// # Panel Filter Group
// Implements the Filter part of [Panel design pattern](https://www.lightningdesignsystem.com/components/panels) in React.
// Based on SLDS v2.2.0-rc.1
// ## Dependencies
// ### React
import React from 'react';
import PropTypes from 'prop-types';
import checkProps from './check-props';
import PanelFilteringFooter from './private/panel-footer';
import PanelHeader from './private/panel-header'; // ## Constants

import { PANEL_FILTER_GROUP } from '../../../utilities/constants';
var defaultProps = {
  addFilterLabel: 'Add Filter',
  cancelLabel: 'Cancel',
  assistiveText: {
    closeButton: 'Close Filter Panel'
  },
  heading: 'Filter',
  saveLabel: 'Save',
  removeAllLabel: 'Remove All'
};
/**
 * A filtering panel contextual filtering options.
 */

var PanelFilterGroup = function PanelFilterGroup(_ref) {
  var children = _ref.children,
      errorLabel = _ref.errorLabel,
      footer = _ref.footer,
      header = _ref.header,
      variant = _ref.variant,
      _ref$addFilterLabel = _ref.addFilterLabel,
      addFilterLabel = _ref$addFilterLabel === void 0 ? defaultProps.addFilterLabel : _ref$addFilterLabel,
      onClickAdd = _ref.onClickAdd,
      onClickRemoveAll = _ref.onClickRemoveAll,
      _ref$removeAllLabel = _ref.removeAllLabel,
      removeAllLabel = _ref$removeAllLabel === void 0 ? defaultProps.removeAllLabel : _ref$removeAllLabel,
      _ref$cancelLabel = _ref.cancelLabel,
      cancelLabel = _ref$cancelLabel === void 0 ? defaultProps.cancelLabel : _ref$cancelLabel,
      _ref$heading = _ref.heading,
      heading = _ref$heading === void 0 ? defaultProps.heading : _ref$heading,
      modified = _ref.modified,
      onRequestCancel = _ref.onRequestCancel,
      onRequestClose = _ref.onRequestClose,
      onRequestSave = _ref.onRequestSave,
      _ref$saveLabel = _ref.saveLabel,
      saveLabel = _ref$saveLabel === void 0 ? defaultProps.saveLabel : _ref$saveLabel,
      _ref$assistiveText = _ref.assistiveText,
      assistiveText = _ref$assistiveText === void 0 ? defaultProps.assistiveText : _ref$assistiveText,
      assistiveTextCloseFilterPanel = _ref.assistiveTextCloseFilterPanel,
      rest = _objectWithoutProperties(_ref, ["children", "errorLabel", "footer", "header", "variant", "addFilterLabel", "onClickAdd", "onClickRemoveAll", "removeAllLabel", "cancelLabel", "heading", "modified", "onRequestCancel", "onRequestClose", "onRequestSave", "saveLabel", "assistiveText", "assistiveTextCloseFilterPanel"]);

  checkProps(PANEL_FILTER_GROUP, _objectSpread({
    children: children,
    errorLabel: errorLabel,
    footer: footer,
    header: header,
    variant: variant,
    addFilterLabel: addFilterLabel,
    onClickAdd: onClickAdd,
    onClickRemoveAll: onClickRemoveAll,
    removeAllLabel: removeAllLabel,
    cancelLabel: cancelLabel,
    heading: heading,
    modified: modified,
    onRequestCancel: onRequestCancel,
    onRequestClose: onRequestClose,
    onRequestSave: onRequestSave,
    saveLabel: saveLabel,
    assistiveText: assistiveText,
    assistiveTextCloseFilterPanel: assistiveTextCloseFilterPanel
  }, rest));

  var mergedAssistiveText = _objectSpread(_objectSpread({}, defaultProps.assistiveText), assistiveText);

  if (assistiveTextCloseFilterPanel) {
    mergedAssistiveText.closeButton = assistiveTextCloseFilterPanel;
  }

  return /*#__PURE__*/React.createElement("div", {
    className: "slds-filters"
  }, variant === 'panel' ? /*#__PURE__*/React.createElement(PanelHeader, {
    assistiveText: mergedAssistiveText,
    cancelLabel: cancelLabel,
    heading: heading,
    modified: modified,
    onRequestCancel: onRequestCancel,
    onRequestClose: onRequestClose,
    onRequestSave: onRequestSave,
    saveLabel: saveLabel
  }) : header || null, /*#__PURE__*/React.createElement("div", {
    className: "slds-filters__body"
  }, errorLabel ? /*#__PURE__*/React.createElement("div", {
    className: "slds-text-color_error slds-m-bottom_x-small",
    role: "alert"
  }, errorLabel) : null, children), variant === 'panel' ? /*#__PURE__*/React.createElement(PanelFilteringFooter, {
    addFilterLabel: addFilterLabel,
    onClickAdd: onClickAdd,
    onClickRemoveAll: onClickRemoveAll,
    removeAllLabel: removeAllLabel
  }) : footer || null);
};

PanelFilterGroup.displayName = PANEL_FILTER_GROUP;
PanelFilterGroup.propTypes = {
  /**
   * **Assistive text for accessibility.**
   * This object is merged with the default props object on every render.
   * * `closeButton`: Localized description of the close button for the panel for screen readers
   */
  assistiveText: PropTypes.shape({
    closeButton: PropTypes.string
  }),

  /**
   * Localized description of the "Add Filter" button in the footer
   */
  addFilterLabel: PropTypes.node,

  /**
   * Label for button that cancels modified filters
   */
  cancelLabel: PropTypes.string,

  /**
   * Pass in `FilterList`'s of `Filters`:
   *
   * ```
   * <FilterGroup
   *   variant="panel"
   * >
   *   <FilterList>
   *   <Filter
   *     property="Show Me"
   *     predicate="All Wackamoles"
   *   >
   *   {popoverContents}
   *   </Filter>
   *   </FilterList>
   * </FilterGroup>
   * ```
   */
  children: PropTypes.node,

  /**
   * Label for the error message at the top of the panel.
   */
  errorLabel: PropTypes.string,

  /**
   * Allows for customization of footer. This will be added after any `FilterList`'s in the DOM. If using Panel Filter Group outside of a panel, do not set the variant to `panel` and header and footer will be removed.
   */
  footer: PropTypes.node,

  /**
   * Allows for customization of header. This will be added before any `FilterList`'s in the DOM. If using Panel Filter Group outside of a panel, do not set the variant to `panel` and header and footer will be removed.
   */
  header: PropTypes.node,

  /**
   * The heading within the header of the filtering panel
   */
  heading: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),

  /**
   * Shows confirmation heading. Please see `onRequestCancel` and `onRequestSave`.
   */
  modified: PropTypes.bool,

  /**
   * Callback triggered when "Add Filter" is clicked. Recieves an `event`.
   */
  onClickAdd: PropTypes.func,

  /**
   * Callback triggered when "Remove All" is clicked. Recieves an `event`.
   */
  onClickRemoveAll: PropTypes.func,

  /**
   * When the panel's cancel button is clicked in order to reset filter panel to previous state.
   */
  onRequestCancel: PropTypes.func,

  /**
   * When the panel's close button is clicked. Please place Panel within another element to control position and visibility.
   */
  onRequestClose: PropTypes.func,

  /**
   * When the panel's save button is clicked in order to confirm filter panel state.
   */
  onRequestSave: PropTypes.func,

  /**
   * Localized description of the "Remove All" button in the footer
   */
  removeAllLabel: PropTypes.node,

  /**
   * Label for button that saves modified filters
   */
  saveLabel: PropTypes.string,

  /**
   * Adds in default Panel header and footer
   */
  variant: PropTypes.oneOf(['panel'])
};
export default PanelFilterGroup;
//# sourceMappingURL=group.js.map