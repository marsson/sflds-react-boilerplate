{"version":3,"sources":["../../../../.tmp-es/components/icon/input-icon/index.jsx"],"names":["React","PropTypes","classNames","isFunction","UtilityIcon","Button","ICON_INPUT","InputIcon","category","variant","iconPosition","name","path","onClick","rest","variants","combobox","base","displayName","propTypes","string","oneOf","func"],"mappings":";;;;;;;;AAAA;;AACA;AAEA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB,C,CAEA;AACA;AACA;;AACA,OAAOC,UAAP,MAAuB,YAAvB,C,CAEA;;AACA,OAAOC,UAAP,MAAuB,mBAAvB,C,CAEA;;AACA,OAAOC,WAAP,MAAwB,8BAAxB;AACA,OAAOC,MAAP,MAAmB,cAAnB,C,CAEA;;AACA,SAASC,UAAT,QAA2B,8BAA3B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAMC,SAAS,GAAG,SAAZA,SAAY,OAQZ;AAAA,2BAPLC,QAOK;AAAA,MAPLA,QAOK,8BAPM,SAON;AAAA,0BANLC,OAMK;AAAA,MANLA,OAMK,6BANK,MAML;AAAA,MALLC,YAKK,QALLA,YAKK;AAAA,MAJLC,IAIK,QAJLA,IAIK;AAAA,MAHLC,IAGK,QAHLA,IAGK;AAAA,MAFLC,OAEK,QAFLA,OAEK;AAAA,MADFC,IACE;;AACL;AAEA,MAAMC,QAAQ,GAAG;AAChBC,IAAAA,QAAQ,eACP;AAAM,MAAA,SAAS,EAAC;AAAhB,oBACC,oBAAC,WAAD;AACC,yBADD;AAEC,MAAA,QAAQ,EAAER,QAFX;AAGC,MAAA,SAAS,EAAEN,UAAU,CACpB,oDADoB,CAHtB;AAMC,MAAA,IAAI,EAAES,IANP;AAOC,MAAA,IAAI,EAAEC;AAPP,OAQKE,IARL,EADD,CAFe;AAehBG,IAAAA,IAAI,eACH,oBAAC,WAAD;AACC,yBADD;AAEC,MAAA,QAAQ,EAAET,QAFX;AAGC,MAAA,SAAS,EAAEN,UAAU,CAAC,yCAAD,iDACCQ,YADD,GACkBA,YADlB,EAHtB;AAMC,MAAA,IAAI,EAAEC,IANP;AAOC,MAAA,IAAI,EAAEC;AAPP,OAQKE,IARL;AAhBe,GAAjB;AA6BA,SAAOX,UAAU,CAACU,OAAD,CAAV,gBACN,oBAAC,MAAD;AACC,IAAA,SAAS,EAAEX,UAAU,CAAC,kBAAD,iDACCQ,YADD,GACkBA,YADlB,EADtB;AAIC,IAAA,YAAY,EAAEF,QAJf;AAKC,IAAA,QAAQ,EAAEG,IALX;AAMC,IAAA,QAAQ,EAAEC,IANX;AAOC,IAAA,OAAO,EAAEC,OAPV;AAQC,IAAA,OAAO,EAAC;AART,KASKC,IATL,EADM,GAaNC,QAAQ,CAACN,OAAD,CAbT;AAeA,CAvDD;;AAyDAF,SAAS,CAACW,WAAV,GAAwBZ,UAAxB;AAEAC,SAAS,CAACY,SAAV,GAAsB;AACrB;AACD;AACA;AACCX,EAAAA,QAAQ,EAAEP,SAAS,CAACmB,MAJC;;AAKrB;AACD;AACA;AACCV,EAAAA,YAAY,EAAET,SAAS,CAACoB,KAAV,CAAgB,CAAC,MAAD,EAAS,OAAT,CAAhB,CARO;;AASrB;AACD;AACA;AACCV,EAAAA,IAAI,EAAEV,SAAS,CAACmB,MAZK;;AAarB;AACD;AACA;AACCR,EAAAA,IAAI,EAAEX,SAAS,CAACmB,MAhBK;;AAiBrB;AACD;AACA;AACCP,EAAAA,OAAO,EAAEZ,SAAS,CAACqB,IApBE;;AAqBrB;AACD;AACA;AACCb,EAAAA,OAAO,EAAER,SAAS,CAACoB,KAAV,CAAgB,CAAC,MAAD,EAAS,UAAT,CAAhB;AAxBY,CAAtB;AA2BA,eAAed,SAAf","sourcesContent":["/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\n// ### React\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\n// ### classNames\n// [github.com/JedWatson/classnames](https://github.com/JedWatson/classnames)\n// A simple javascript utility for conditionally joining classNames together.\nimport classNames from 'classnames';\n\n// ### isFunction\nimport isFunction from 'lodash.isfunction';\n\n// ## Children\nimport UtilityIcon from '../../utilities/utility-icon';\nimport Button from '../../button';\n\n// ## Constants\nimport { ICON_INPUT } from '../../../utilities/constants';\n\n/**\n * A wrapper for icons that will be rendered inside of an Input\n *\n * If the `onClick` function prop is provided, the `design-system-react/components/button` component is used.\n * If not, the icon will be an instance of `design-system-react/components/utilities/utility-icon`.\n * Checkout out the appropriate component to see what props can be passed along via the `{...props}` rest operator\n */\nconst InputIcon = ({\n\tcategory = 'utility',\n\tvariant = 'base',\n\ticonPosition,\n\tname,\n\tpath,\n\tonClick,\n\t...rest\n}) => {\n\t// need to pass click event up on SVG\n\n\tconst variants = {\n\t\tcombobox: (\n\t\t\t<span className=\"slds-icon_container slds-input__icon slds-input__icon_right\">\n\t\t\t\t<UtilityIcon\n\t\t\t\t\taria-hidden\n\t\t\t\t\tcategory={category}\n\t\t\t\t\tclassName={classNames(\n\t\t\t\t\t\t'slds-icon slds-icon_x-small slds-icon-text-default'\n\t\t\t\t\t)}\n\t\t\t\t\tname={name}\n\t\t\t\t\tpath={path}\n\t\t\t\t\t{...rest}\n\t\t\t\t/>\n\t\t\t</span>\n\t\t),\n\t\tbase: (\n\t\t\t<UtilityIcon\n\t\t\t\taria-hidden\n\t\t\t\tcategory={category}\n\t\t\t\tclassName={classNames('slds-input__icon slds-icon-text-default', {\n\t\t\t\t\t[`slds-input__icon_${iconPosition}`]: iconPosition,\n\t\t\t\t})}\n\t\t\t\tname={name}\n\t\t\t\tpath={path}\n\t\t\t\t{...rest}\n\t\t\t/>\n\t\t),\n\t};\n\n\treturn isFunction(onClick) ? (\n\t\t<Button\n\t\t\tclassName={classNames('slds-input__icon', {\n\t\t\t\t[`slds-input__icon_${iconPosition}`]: iconPosition,\n\t\t\t})}\n\t\t\ticonCategory={category}\n\t\t\ticonName={name}\n\t\t\ticonPath={path}\n\t\t\tonClick={onClick}\n\t\t\tvariant=\"icon\"\n\t\t\t{...rest}\n\t\t/>\n\t) : (\n\t\tvariants[variant]\n\t);\n};\n\nInputIcon.displayName = ICON_INPUT;\n\nInputIcon.propTypes = {\n\t/**\n\t * Icon category from [lightningdesignsystem.com/icons/](https://www.lightningdesignsystem.com/icons/)\n\t */\n\tcategory: PropTypes.string,\n\t/**\n\t * This is only needed if an input contains two icons, the Input component handles this prop for you.\n\t */\n\ticonPosition: PropTypes.oneOf(['left', 'right']),\n\t/**\n\t * Name of the icon. Visit <a href='http://www.lightningdesignsystem.com/resources/icons'>Lightning Design System Icons</a> to reference icon names.\n\t */\n\tname: PropTypes.string,\n\t/**\n\t * Path to the icon. This will override any global icon settings.\n\t */\n\tpath: PropTypes.string,\n\t/**\n\t * This event fires when the icon is clicked.\n\t */\n\tonClick: PropTypes.func,\n\t/**\n\t * Changes styles of the InputIcon.\n\t */\n\tvariant: PropTypes.oneOf(['base', 'combobox']),\n};\n\nexport default InputIcon;\n"],"file":"index.js"}